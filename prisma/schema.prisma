// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  name           String
  Address        Address[]
  UserAccess     UserAccess[]
  Store          Store[]
  Sale_as_buyer  Sale[]       @relation("buyer")
  Sale_as_seller Sale[]       @relation("seller")
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model Address {
  id      String  @id @default(uuid())
  street  String
  number  String
  cep     String
  city    String
  state   String
  country String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Access {
  id         String       @id @default(uuid())
  name       String       @unique
  UserAccess UserAccess[]
  created_at DateTime?    @default(now())
  updated_at DateTime?    @updatedAt
}

model UserAccess {
  id         String   @id @default(uuid())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Access     Access?  @relation(fields: [accessId], references: [id])
  accessId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Store {
  id         String    @id @default(uuid())
  name       String    @unique
  Product    Product[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  name        String        @unique
  description String
  price       Float
  amount      Int
  imageUrl    String
  Store       Store?        @relation(fields: [storeId], references: [id])
  storeId     String?
  SaleProduct SaleProduct[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

// Tabela para pedidos, relacionando ID de comprador e vendedor 

model Sale {
  id          String        @id @default(uuid())
  total       Float
  Buyer       User?         @relation("buyer", fields: [buyerId], references: [id])
  buyerId     String?
  Seller      User?         @relation("seller", fields: [sellerId], references: [id])
  sellerId    String?
  SaleProduct SaleProduct[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

// Tabela que relaciona Produto e quantidade com Venda em espec√≠fico

model SaleProduct {
  id         String   @id @default(uuid())
  quantity   Int
  Sale       Sale     @relation(fields: [saleId], references: [id])
  saleId     String
  Product    Product  @relation(fields: [productId], references: [id])
  productId  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
